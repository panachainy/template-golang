// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"template-golang/modules/cockroach/entities"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCockroachRepository creates a new instance of MockCockroachRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCockroachRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCockroachRepository {
	mock := &MockCockroachRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCockroachRepository is an autogenerated mock type for the CockroachRepository type
type MockCockroachRepository struct {
	mock.Mock
}

type MockCockroachRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCockroachRepository) EXPECT() *MockCockroachRepository_Expecter {
	return &MockCockroachRepository_Expecter{mock: &_m.Mock}
}

// GetCockroachByID provides a mock function for the type MockCockroachRepository
func (_mock *MockCockroachRepository) GetCockroachByID(ctx context.Context, id uint32) (*entities.Cockroach, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCockroachByID")
	}

	var r0 *entities.Cockroach
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) (*entities.Cockroach, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) *entities.Cockroach); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Cockroach)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCockroachRepository_GetCockroachByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCockroachByID'
type MockCockroachRepository_GetCockroachByID_Call struct {
	*mock.Call
}

// GetCockroachByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint32
func (_e *MockCockroachRepository_Expecter) GetCockroachByID(ctx interface{}, id interface{}) *MockCockroachRepository_GetCockroachByID_Call {
	return &MockCockroachRepository_GetCockroachByID_Call{Call: _e.mock.On("GetCockroachByID", ctx, id)}
}

func (_c *MockCockroachRepository_GetCockroachByID_Call) Run(run func(ctx context.Context, id uint32)) *MockCockroachRepository_GetCockroachByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCockroachRepository_GetCockroachByID_Call) Return(cockroach *entities.Cockroach, err error) *MockCockroachRepository_GetCockroachByID_Call {
	_c.Call.Return(cockroach, err)
	return _c
}

func (_c *MockCockroachRepository_GetCockroachByID_Call) RunAndReturn(run func(ctx context.Context, id uint32) (*entities.Cockroach, error)) *MockCockroachRepository_GetCockroachByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCockroachData provides a mock function for the type MockCockroachRepository
func (_mock *MockCockroachRepository) InsertCockroachData(ctx context.Context, in *entities.InsertCockroachDto) (*entities.Cockroach, error) {
	ret := _mock.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for InsertCockroachData")
	}

	var r0 *entities.Cockroach
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.InsertCockroachDto) (*entities.Cockroach, error)); ok {
		return returnFunc(ctx, in)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.InsertCockroachDto) *entities.Cockroach); ok {
		r0 = returnFunc(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Cockroach)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.InsertCockroachDto) error); ok {
		r1 = returnFunc(ctx, in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCockroachRepository_InsertCockroachData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCockroachData'
type MockCockroachRepository_InsertCockroachData_Call struct {
	*mock.Call
}

// InsertCockroachData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *entities.InsertCockroachDto
func (_e *MockCockroachRepository_Expecter) InsertCockroachData(ctx interface{}, in interface{}) *MockCockroachRepository_InsertCockroachData_Call {
	return &MockCockroachRepository_InsertCockroachData_Call{Call: _e.mock.On("InsertCockroachData", ctx, in)}
}

func (_c *MockCockroachRepository_InsertCockroachData_Call) Run(run func(ctx context.Context, in *entities.InsertCockroachDto)) *MockCockroachRepository_InsertCockroachData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entities.InsertCockroachDto
		if args[1] != nil {
			arg1 = args[1].(*entities.InsertCockroachDto)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCockroachRepository_InsertCockroachData_Call) Return(cockroach *entities.Cockroach, err error) *MockCockroachRepository_InsertCockroachData_Call {
	_c.Call.Return(cockroach, err)
	return _c
}

func (_c *MockCockroachRepository_InsertCockroachData_Call) RunAndReturn(run func(ctx context.Context, in *entities.InsertCockroachDto) (*entities.Cockroach, error)) *MockCockroachRepository_InsertCockroachData_Call {
	_c.Call.Return(run)
	return _c
}

// ListCockroaches provides a mock function for the type MockCockroachRepository
func (_mock *MockCockroachRepository) ListCockroaches(ctx context.Context) ([]*entities.Cockroach, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCockroaches")
	}

	var r0 []*entities.Cockroach
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*entities.Cockroach, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*entities.Cockroach); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Cockroach)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCockroachRepository_ListCockroaches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCockroaches'
type MockCockroachRepository_ListCockroaches_Call struct {
	*mock.Call
}

// ListCockroaches is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCockroachRepository_Expecter) ListCockroaches(ctx interface{}) *MockCockroachRepository_ListCockroaches_Call {
	return &MockCockroachRepository_ListCockroaches_Call{Call: _e.mock.On("ListCockroaches", ctx)}
}

func (_c *MockCockroachRepository_ListCockroaches_Call) Run(run func(ctx context.Context)) *MockCockroachRepository_ListCockroaches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCockroachRepository_ListCockroaches_Call) Return(cockroachs []*entities.Cockroach, err error) *MockCockroachRepository_ListCockroaches_Call {
	_c.Call.Return(cockroachs, err)
	return _c
}

func (_c *MockCockroachRepository_ListCockroaches_Call) RunAndReturn(run func(ctx context.Context) ([]*entities.Cockroach, error)) *MockCockroachRepository_ListCockroaches_Call {
	_c.Call.Return(run)
	return _c
}
