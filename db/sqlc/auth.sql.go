// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"
	"database/sql"
)

const getAuthorByUsername = `-- name: GetAuthorByUsername :one
SELECT id, created_at, updated_at, deleted_at, username, password, email, role, active FROM auths
WHERE username = $1
`

func (q *Queries) GetAuthorByUsername(ctx context.Context, username sql.NullString) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getAuthorByUsername, username)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const listAllAuths = `-- name: ListAllAuths :many
SELECT id, created_at, updated_at, deleted_at, username, password, email, role, active FROM auths
ORDER BY id
`

func (q *Queries) ListAllAuths(ctx context.Context) ([]Auth, error) {
	rows, err := q.db.QueryContext(ctx, listAllAuths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Auth
	for rows.Next() {
		var i Auth
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Role,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, created_at, updated_at, deleted_at, username, password, email, role, active FROM auths
WHERE id = $1
`

func (q *Queries) ListAuthors(ctx context.Context, id string) ([]Auth, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Auth
	for rows.Next() {
		var i Auth
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Role,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
