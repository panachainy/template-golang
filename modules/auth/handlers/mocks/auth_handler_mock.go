// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthHandler creates a new instance of MockAuthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthHandler {
	mock := &MockAuthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthHandler is an autogenerated mock type for the AuthHandler type
type MockAuthHandler struct {
	mock.Mock
}

type MockAuthHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthHandler) EXPECT() *MockAuthHandler_Expecter {
	return &MockAuthHandler_Expecter{mock: &_m.Mock}
}

// AuthCallback provides a mock function for the type MockAuthHandler
func (_mock *MockAuthHandler) AuthCallback(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockAuthHandler_AuthCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthCallback'
type MockAuthHandler_AuthCallback_Call struct {
	*mock.Call
}

// AuthCallback is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockAuthHandler_Expecter) AuthCallback(c interface{}) *MockAuthHandler_AuthCallback_Call {
	return &MockAuthHandler_AuthCallback_Call{Call: _e.mock.On("AuthCallback", c)}
}

func (_c *MockAuthHandler_AuthCallback_Call) Run(run func(c *gin.Context)) *MockAuthHandler_AuthCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthHandler_AuthCallback_Call) Return() *MockAuthHandler_AuthCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHandler_AuthCallback_Call) RunAndReturn(run func(c *gin.Context)) *MockAuthHandler_AuthCallback_Call {
	_c.Run(run)
	return _c
}

// Example provides a mock function for the type MockAuthHandler
func (_mock *MockAuthHandler) Example(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockAuthHandler_Example_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Example'
type MockAuthHandler_Example_Call struct {
	*mock.Call
}

// Example is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockAuthHandler_Expecter) Example(c interface{}) *MockAuthHandler_Example_Call {
	return &MockAuthHandler_Example_Call{Call: _e.mock.On("Example", c)}
}

func (_c *MockAuthHandler_Example_Call) Run(run func(c *gin.Context)) *MockAuthHandler_Example_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthHandler_Example_Call) Return() *MockAuthHandler_Example_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHandler_Example_Call) RunAndReturn(run func(c *gin.Context)) *MockAuthHandler_Example_Call {
	_c.Run(run)
	return _c
}

// Login provides a mock function for the type MockAuthHandler
func (_mock *MockAuthHandler) Login(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockAuthHandler_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthHandler_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockAuthHandler_Expecter) Login(c interface{}) *MockAuthHandler_Login_Call {
	return &MockAuthHandler_Login_Call{Call: _e.mock.On("Login", c)}
}

func (_c *MockAuthHandler_Login_Call) Run(run func(c *gin.Context)) *MockAuthHandler_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthHandler_Login_Call) Return() *MockAuthHandler_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHandler_Login_Call) RunAndReturn(run func(c *gin.Context)) *MockAuthHandler_Login_Call {
	_c.Run(run)
	return _c
}

// Logout provides a mock function for the type MockAuthHandler
func (_mock *MockAuthHandler) Logout(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockAuthHandler_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthHandler_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockAuthHandler_Expecter) Logout(c interface{}) *MockAuthHandler_Logout_Call {
	return &MockAuthHandler_Logout_Call{Call: _e.mock.On("Logout", c)}
}

func (_c *MockAuthHandler_Logout_Call) Run(run func(c *gin.Context)) *MockAuthHandler_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthHandler_Logout_Call) Return() *MockAuthHandler_Logout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHandler_Logout_Call) RunAndReturn(run func(c *gin.Context)) *MockAuthHandler_Logout_Call {
	_c.Run(run)
	return _c
}

// Routes provides a mock function for the type MockAuthHandler
func (_mock *MockAuthHandler) Routes(routerGroup *gin.RouterGroup) {
	_mock.Called(routerGroup)
	return
}

// MockAuthHandler_Routes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routes'
type MockAuthHandler_Routes_Call struct {
	*mock.Call
}

// Routes is a helper method to define mock.On call
//   - routerGroup *gin.RouterGroup
func (_e *MockAuthHandler_Expecter) Routes(routerGroup interface{}) *MockAuthHandler_Routes_Call {
	return &MockAuthHandler_Routes_Call{Call: _e.mock.On("Routes", routerGroup)}
}

func (_c *MockAuthHandler_Routes_Call) Run(run func(routerGroup *gin.RouterGroup)) *MockAuthHandler_Routes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.RouterGroup
		if args[0] != nil {
			arg0 = args[0].(*gin.RouterGroup)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthHandler_Routes_Call) Return() *MockAuthHandler_Routes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthHandler_Routes_Call) RunAndReturn(run func(routerGroup *gin.RouterGroup)) *MockAuthHandler_Routes_Call {
	_c.Run(run)
	return _c
}
