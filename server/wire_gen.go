// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/google/wire"
	"template-golang/config"
	"template-golang/database"
	"template-golang/modules/auth"
	handlers2 "template-golang/modules/auth/handlers"
	"template-golang/modules/auth/middlewares"
	repositories2 "template-golang/modules/auth/repositories"
	usecases2 "template-golang/modules/auth/usecases"
	"template-golang/modules/cockroach"
	"template-golang/modules/cockroach/handlers"
	"template-golang/modules/cockroach/repositories"
	"template-golang/modules/cockroach/usecases"
)

// Injectors from wire.go:

func Wire() (Server, error) {
	configOption := config.RootConfig()
	configConfig := config.Provide(configOption)
	postgresDatabase := database.NewPostgres(configConfig)
	cockroachPostgresRepository := repositories.ProvidePostgresRepository(postgresDatabase)
	cockroachFCMMessaging := repositories.ProvideFCMMessaging()
	cockroachUsecaseImpl := usecases.Provide(cockroachPostgresRepository, cockroachFCMMessaging)
	cockroachHttpHandler := handlers.Provide(cockroachUsecaseImpl)
	cockroachCockroach := &cockroach.Cockroach{
		Handler:    cockroachHttpHandler,
		Repository: cockroachPostgresRepository,
		Messaging:  cockroachFCMMessaging,
		Usecase:    cockroachUsecaseImpl,
	}
	authPostgresRepository := repositories2.ProvideAuthRepository(postgresDatabase)
	jwtUsecaseImpl := usecases2.Provide(configConfig, authPostgresRepository)
	userAuthMiddleware := middlewares.Provide(jwtUsecaseImpl)
	authHttpHandler := handlers2.Provide(jwtUsecaseImpl, configConfig, userAuthMiddleware, authPostgresRepository)
	authAuth := &auth.Auth{
		Handler:    authHttpHandler,
		Middleware: userAuthMiddleware,
	}
	serverGinServer := Provide(configConfig, cockroachCockroach, authAuth)
	return serverGinServer, nil
}

// wire.go:

var ProviderSet = wire.NewSet(
	Provide, wire.Bind(new(Server), new(*ginServer)), config.ProviderSet, database.PostgresProviderSet, cockroach.ProviderSet, auth.ProviderSet,
)
