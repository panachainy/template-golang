// Code generated by MockGen. DO NOT EDIT.
// Source: cockroachUsecase.go
//
// Generated by this command:
//
//	mockgen -source=cockroachUsecase.go -destination=../../../mock/mock_cockroach_usecase.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "template-golang/modules/cockroach/models"

	gomock "go.uber.org/mock/gomock"
)

// MockCockroachUsecase is a mock of CockroachUsecase interface.
type MockCockroachUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCockroachUsecaseMockRecorder
	isgomock struct{}
}

// MockCockroachUsecaseMockRecorder is the mock recorder for MockCockroachUsecase.
type MockCockroachUsecaseMockRecorder struct {
	mock *MockCockroachUsecase
}

// NewMockCockroachUsecase creates a new mock instance.
func NewMockCockroachUsecase(ctrl *gomock.Controller) *MockCockroachUsecase {
	mock := &MockCockroachUsecase{ctrl: ctrl}
	mock.recorder = &MockCockroachUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCockroachUsecase) EXPECT() *MockCockroachUsecaseMockRecorder {
	return m.recorder
}

// ProcessData mocks base method.
func (m *MockCockroachUsecase) ProcessData(data *models.AddCockroachData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessData indicates an expected call of ProcessData.
func (mr *MockCockroachUsecaseMockRecorder) ProcessData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessData", reflect.TypeOf((*MockCockroachUsecase)(nil).ProcessData), data)
}
