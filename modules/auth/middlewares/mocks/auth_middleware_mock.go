// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"template-golang/modules/auth/models"

	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthMiddleware creates a new instance of MockAuthMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthMiddleware is an autogenerated mock type for the AuthMiddleware type
type MockAuthMiddleware struct {
	mock.Mock
}

type MockAuthMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthMiddleware) EXPECT() *MockAuthMiddleware_Expecter {
	return &MockAuthMiddleware_Expecter{mock: &_m.Mock}
}

// Allows provides a mock function for the type MockAuthMiddleware
func (_mock *MockAuthMiddleware) Allows(roles []models.Role) gin.HandlerFunc {
	ret := _mock.Called(roles)

	if len(ret) == 0 {
		panic("no return value specified for Allows")
	}

	var r0 gin.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func([]models.Role) gin.HandlerFunc); ok {
		r0 = returnFunc(roles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}
	return r0
}

// MockAuthMiddleware_Allows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allows'
type MockAuthMiddleware_Allows_Call struct {
	*mock.Call
}

// Allows is a helper method to define mock.On call
//   - roles []models.Role
func (_e *MockAuthMiddleware_Expecter) Allows(roles interface{}) *MockAuthMiddleware_Allows_Call {
	return &MockAuthMiddleware_Allows_Call{Call: _e.mock.On("Allows", roles)}
}

func (_c *MockAuthMiddleware_Allows_Call) Run(run func(roles []models.Role)) *MockAuthMiddleware_Allows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []models.Role
		if args[0] != nil {
			arg0 = args[0].([]models.Role)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthMiddleware_Allows_Call) Return(handlerFunc gin.HandlerFunc) *MockAuthMiddleware_Allows_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockAuthMiddleware_Allows_Call) RunAndReturn(run func(roles []models.Role) gin.HandlerFunc) *MockAuthMiddleware_Allows_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function for the type MockAuthMiddleware
func (_mock *MockAuthMiddleware) Handle() gin.HandlerFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 gin.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}
	return r0
}

// MockAuthMiddleware_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockAuthMiddleware_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
func (_e *MockAuthMiddleware_Expecter) Handle() *MockAuthMiddleware_Handle_Call {
	return &MockAuthMiddleware_Handle_Call{Call: _e.mock.On("Handle")}
}

func (_c *MockAuthMiddleware_Handle_Call) Run(run func()) *MockAuthMiddleware_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthMiddleware_Handle_Call) Return(handlerFunc gin.HandlerFunc) *MockAuthMiddleware_Handle_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *MockAuthMiddleware_Handle_Call) RunAndReturn(run func() gin.HandlerFunc) *MockAuthMiddleware_Handle_Call {
	_c.Call.Return(run)
	return _c
}
