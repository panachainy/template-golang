// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLoader creates a new instance of MockLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoader {
	mock := &MockLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoader is an autogenerated mock type for the Loader type
type MockLoader struct {
	mock.Mock
}

type MockLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoader) EXPECT() *MockLoader_Expecter {
	return &MockLoader_Expecter{mock: &_m.Mock}
}

// AllKeys provides a mock function for the type MockLoader
func (_mock *MockLoader) AllKeys() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllKeys")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockLoader_AllKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllKeys'
type MockLoader_AllKeys_Call struct {
	*mock.Call
}

// AllKeys is a helper method to define mock.On call
func (_e *MockLoader_Expecter) AllKeys() *MockLoader_AllKeys_Call {
	return &MockLoader_AllKeys_Call{Call: _e.mock.On("AllKeys")}
}

func (_c *MockLoader_AllKeys_Call) Run(run func()) *MockLoader_AllKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoader_AllKeys_Call) Return(strings []string) *MockLoader_AllKeys_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockLoader_AllKeys_Call) RunAndReturn(run func() []string) *MockLoader_AllKeys_Call {
	_c.Call.Return(run)
	return _c
}

// AllSettings provides a mock function for the type MockLoader
func (_mock *MockLoader) AllSettings() map[string]interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllSettings")
	}

	var r0 map[string]interface{}
	if returnFunc, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	return r0
}

// MockLoader_AllSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllSettings'
type MockLoader_AllSettings_Call struct {
	*mock.Call
}

// AllSettings is a helper method to define mock.On call
func (_e *MockLoader_Expecter) AllSettings() *MockLoader_AllSettings_Call {
	return &MockLoader_AllSettings_Call{Call: _e.mock.On("AllSettings")}
}

func (_c *MockLoader_AllSettings_Call) Run(run func()) *MockLoader_AllSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoader_AllSettings_Call) Return(stringToIfaceVal map[string]interface{}) *MockLoader_AllSettings_Call {
	_c.Call.Return(stringToIfaceVal)
	return _c
}

func (_c *MockLoader_AllSettings_Call) RunAndReturn(run func() map[string]interface{}) *MockLoader_AllSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockLoader
func (_mock *MockLoader) Get(key string) interface{} {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockLoader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLoader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) Get(key interface{}) *MockLoader_Get_Call {
	return &MockLoader_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockLoader_Get_Call) Run(run func(key string)) *MockLoader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_Get_Call) Return(ifaceVal interface{}) *MockLoader_Get_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockLoader_Get_Call) RunAndReturn(run func(key string) interface{}) *MockLoader_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBool provides a mock function for the type MockLoader
func (_mock *MockLoader) GetBool(key string) bool {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockLoader_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockLoader_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) GetBool(key interface{}) *MockLoader_GetBool_Call {
	return &MockLoader_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockLoader_GetBool_Call) Run(run func(key string)) *MockLoader_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_GetBool_Call) Return(b bool) *MockLoader_GetBool_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockLoader_GetBool_Call) RunAndReturn(run func(key string) bool) *MockLoader_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetDuration provides a mock function for the type MockLoader
func (_mock *MockLoader) GetDuration(key string) time.Duration {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDuration")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockLoader_GetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDuration'
type MockLoader_GetDuration_Call struct {
	*mock.Call
}

// GetDuration is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) GetDuration(key interface{}) *MockLoader_GetDuration_Call {
	return &MockLoader_GetDuration_Call{Call: _e.mock.On("GetDuration", key)}
}

func (_c *MockLoader_GetDuration_Call) Run(run func(key string)) *MockLoader_GetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_GetDuration_Call) Return(duration time.Duration) *MockLoader_GetDuration_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockLoader_GetDuration_Call) RunAndReturn(run func(key string) time.Duration) *MockLoader_GetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat64 provides a mock function for the type MockLoader
func (_mock *MockLoader) GetFloat64(key string) float64 {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat64")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func(string) float64); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockLoader_GetFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat64'
type MockLoader_GetFloat64_Call struct {
	*mock.Call
}

// GetFloat64 is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) GetFloat64(key interface{}) *MockLoader_GetFloat64_Call {
	return &MockLoader_GetFloat64_Call{Call: _e.mock.On("GetFloat64", key)}
}

func (_c *MockLoader_GetFloat64_Call) Run(run func(key string)) *MockLoader_GetFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_GetFloat64_Call) Return(f float64) *MockLoader_GetFloat64_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockLoader_GetFloat64_Call) RunAndReturn(run func(key string) float64) *MockLoader_GetFloat64_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function for the type MockLoader
func (_mock *MockLoader) GetInt(key string) int {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockLoader_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockLoader_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) GetInt(key interface{}) *MockLoader_GetInt_Call {
	return &MockLoader_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockLoader_GetInt_Call) Run(run func(key string)) *MockLoader_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_GetInt_Call) Return(n int) *MockLoader_GetInt_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockLoader_GetInt_Call) RunAndReturn(run func(key string) int) *MockLoader_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function for the type MockLoader
func (_mock *MockLoader) GetString(key string) string {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockLoader_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockLoader_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) GetString(key interface{}) *MockLoader_GetString_Call {
	return &MockLoader_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockLoader_GetString_Call) Run(run func(key string)) *MockLoader_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_GetString_Call) Return(s string) *MockLoader_GetString_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockLoader_GetString_Call) RunAndReturn(run func(key string) string) *MockLoader_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringSlice provides a mock function for the type MockLoader
func (_mock *MockLoader) GetStringSlice(key string) []string {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringSlice")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(string) []string); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockLoader_GetStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringSlice'
type MockLoader_GetStringSlice_Call struct {
	*mock.Call
}

// GetStringSlice is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) GetStringSlice(key interface{}) *MockLoader_GetStringSlice_Call {
	return &MockLoader_GetStringSlice_Call{Call: _e.mock.On("GetStringSlice", key)}
}

func (_c *MockLoader_GetStringSlice_Call) Run(run func(key string)) *MockLoader_GetStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_GetStringSlice_Call) Return(strings []string) *MockLoader_GetStringSlice_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockLoader_GetStringSlice_Call) RunAndReturn(run func(key string) []string) *MockLoader_GetStringSlice_Call {
	_c.Call.Return(run)
	return _c
}

// IsSet provides a mock function for the type MockLoader
func (_mock *MockLoader) IsSet(key string) bool {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for IsSet")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockLoader_IsSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSet'
type MockLoader_IsSet_Call struct {
	*mock.Call
}

// IsSet is a helper method to define mock.On call
//   - key string
func (_e *MockLoader_Expecter) IsSet(key interface{}) *MockLoader_IsSet_Call {
	return &MockLoader_IsSet_Call{Call: _e.mock.On("IsSet", key)}
}

func (_c *MockLoader_IsSet_Call) Run(run func(key string)) *MockLoader_IsSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_IsSet_Call) Return(b bool) *MockLoader_IsSet_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockLoader_IsSet_Call) RunAndReturn(run func(key string) bool) *MockLoader_IsSet_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function for the type MockLoader
func (_mock *MockLoader) Load() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLoader_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockLoader_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockLoader_Expecter) Load() *MockLoader_Load_Call {
	return &MockLoader_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockLoader_Load_Call) Run(run func()) *MockLoader_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoader_Load_Call) Return(err error) *MockLoader_Load_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLoader_Load_Call) RunAndReturn(run func() error) *MockLoader_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function for the type MockLoader
func (_mock *MockLoader) Unmarshal(rawVal interface{}) error {
	ret := _mock.Called(rawVal)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(rawVal)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLoader_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockLoader_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - rawVal interface{}
func (_e *MockLoader_Expecter) Unmarshal(rawVal interface{}) *MockLoader_Unmarshal_Call {
	return &MockLoader_Unmarshal_Call{Call: _e.mock.On("Unmarshal", rawVal)}
}

func (_c *MockLoader_Unmarshal_Call) Run(run func(rawVal interface{})) *MockLoader_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLoader_Unmarshal_Call) Return(err error) *MockLoader_Unmarshal_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLoader_Unmarshal_Call) RunAndReturn(run func(rawVal interface{}) error) *MockLoader_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalKey provides a mock function for the type MockLoader
func (_mock *MockLoader) UnmarshalKey(key string, rawVal interface{}) error {
	ret := _mock.Called(key, rawVal)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(key, rawVal)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLoader_UnmarshalKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalKey'
type MockLoader_UnmarshalKey_Call struct {
	*mock.Call
}

// UnmarshalKey is a helper method to define mock.On call
//   - key string
//   - rawVal interface{}
func (_e *MockLoader_Expecter) UnmarshalKey(key interface{}, rawVal interface{}) *MockLoader_UnmarshalKey_Call {
	return &MockLoader_UnmarshalKey_Call{Call: _e.mock.On("UnmarshalKey", key, rawVal)}
}

func (_c *MockLoader_UnmarshalKey_Call) Run(run func(key string, rawVal interface{})) *MockLoader_UnmarshalKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLoader_UnmarshalKey_Call) Return(err error) *MockLoader_UnmarshalKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLoader_UnmarshalKey_Call) RunAndReturn(run func(key string, rawVal interface{}) error) *MockLoader_UnmarshalKey_Call {
	_c.Call.Return(run)
	return _c
}
