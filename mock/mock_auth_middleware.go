// Code generated by MockGen. DO NOT EDIT.
// Source: authMiddleware.go
//
// Generated by this command:
//
//	mockgen -source=authMiddleware.go -destination=../../../mock/mock_auth_middleware.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "template-golang/modules/auth/models"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthMiddleware is a mock of AuthMiddleware interface.
type MockAuthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareMockRecorder
	isgomock struct{}
}

// MockAuthMiddlewareMockRecorder is the mock recorder for MockAuthMiddleware.
type MockAuthMiddlewareMockRecorder struct {
	mock *MockAuthMiddleware
}

// NewMockAuthMiddleware creates a new mock instance.
func NewMockAuthMiddleware(ctrl *gomock.Controller) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleware) EXPECT() *MockAuthMiddlewareMockRecorder {
	return m.recorder
}

// Allows mocks base method.
func (m *MockAuthMiddleware) Allows(roles []models.Role) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allows", roles)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Allows indicates an expected call of Allows.
func (mr *MockAuthMiddlewareMockRecorder) Allows(roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allows", reflect.TypeOf((*MockAuthMiddleware)(nil).Allows), roles)
}

// Handle mocks base method.
func (m *MockAuthMiddleware) Handle() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockAuthMiddlewareMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockAuthMiddleware)(nil).Handle))
}
