// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jackc/pgx/v5/pgxpool"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Close() {
	_mock.Called()
	return
}

// MockDatabase_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDatabase_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Close() *MockDatabase_Close_Call {
	return &MockDatabase_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDatabase_Close_Call) Run(run func()) *MockDatabase_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Close_Call) Return() *MockDatabase_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatabase_Close_Call) RunAndReturn(run func()) *MockDatabase_Close_Call {
	_c.Run(run)
	return _c
}

// GetPool provides a mock function for the type MockDatabase
func (_mock *MockDatabase) GetPool() *pgxpool.Pool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 *pgxpool.Pool
	if returnFunc, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}
	return r0
}

// MockDatabase_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type MockDatabase_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) GetPool() *MockDatabase_GetPool_Call {
	return &MockDatabase_GetPool_Call{Call: _e.mock.On("GetPool")}
}

func (_c *MockDatabase_GetPool_Call) Run(run func()) *MockDatabase_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_GetPool_Call) Return(pool *pgxpool.Pool) *MockDatabase_GetPool_Call {
	_c.Call.Return(pool)
	return _c
}

func (_c *MockDatabase_GetPool_Call) RunAndReturn(run func() *pgxpool.Pool) *MockDatabase_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabase_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDatabase_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDatabase_Expecter) Ping(ctx interface{}) *MockDatabase_Ping_Call {
	return &MockDatabase_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockDatabase_Ping_Call) Run(run func(ctx context.Context)) *MockDatabase_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_Ping_Call) Return(err error) *MockDatabase_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabase_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockDatabase_Ping_Call {
	_c.Call.Return(run)
	return _c
}
