// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"template-golang/db/sqlc"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateAuth provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) CreateAuth(ctx context.Context, username *string, password *string, email *string, role string, active bool) (*db.Auth, error) {
	ret := _mock.Called(ctx, username, password, email, role, active)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuth")
	}

	var r0 *db.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *string, *string, string, bool) (*db.Auth, error)); ok {
		return returnFunc(ctx, username, password, email, role, active)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *string, *string, *string, string, bool) *db.Auth); ok {
		r0 = returnFunc(ctx, username, password, email, role, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *string, *string, *string, string, bool) error); ok {
		r1 = returnFunc(ctx, username, password, email, role, active)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_CreateAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuth'
type MockAuthRepository_CreateAuth_Call struct {
	*mock.Call
}

// CreateAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - username *string
//   - password *string
//   - email *string
//   - role string
//   - active bool
func (_e *MockAuthRepository_Expecter) CreateAuth(ctx interface{}, username interface{}, password interface{}, email interface{}, role interface{}, active interface{}) *MockAuthRepository_CreateAuth_Call {
	return &MockAuthRepository_CreateAuth_Call{Call: _e.mock.On("CreateAuth", ctx, username, password, email, role, active)}
}

func (_c *MockAuthRepository_CreateAuth_Call) Run(run func(ctx context.Context, username *string, password *string, email *string, role string, active bool)) *MockAuthRepository_CreateAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 bool
		if args[5] != nil {
			arg5 = args[5].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockAuthRepository_CreateAuth_Call) Return(auth *db.Auth, err error) *MockAuthRepository_CreateAuth_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_CreateAuth_Call) RunAndReturn(run func(ctx context.Context, username *string, password *string, email *string, role string, active bool) (*db.Auth, error)) *MockAuthRepository_CreateAuth_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuthMethod provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) CreateAuthMethod(ctx context.Context, params db.CreateAuthMethodParams) (*db.AuthMethod, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthMethod")
	}

	var r0 *db.AuthMethod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateAuthMethodParams) (*db.AuthMethod, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateAuthMethodParams) *db.AuthMethod); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.AuthMethod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateAuthMethodParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_CreateAuthMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthMethod'
type MockAuthRepository_CreateAuthMethod_Call struct {
	*mock.Call
}

// CreateAuthMethod is a helper method to define mock.On call
//   - ctx context.Context
//   - params db.CreateAuthMethodParams
func (_e *MockAuthRepository_Expecter) CreateAuthMethod(ctx interface{}, params interface{}) *MockAuthRepository_CreateAuthMethod_Call {
	return &MockAuthRepository_CreateAuthMethod_Call{Call: _e.mock.On("CreateAuthMethod", ctx, params)}
}

func (_c *MockAuthRepository_CreateAuthMethod_Call) Run(run func(ctx context.Context, params db.CreateAuthMethodParams)) *MockAuthRepository_CreateAuthMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateAuthMethodParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateAuthMethodParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_CreateAuthMethod_Call) Return(authMethod *db.AuthMethod, err error) *MockAuthRepository_CreateAuthMethod_Call {
	_c.Call.Return(authMethod, err)
	return _c
}

func (_c *MockAuthRepository_CreateAuthMethod_Call) RunAndReturn(run func(ctx context.Context, params db.CreateAuthMethodParams) (*db.AuthMethod, error)) *MockAuthRepository_CreateAuthMethod_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthByEmail provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetAuthByEmail(ctx context.Context, email string) (*db.Auth, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthByEmail")
	}

	var r0 *db.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*db.Auth, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *db.Auth); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetAuthByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthByEmail'
type MockAuthRepository_GetAuthByEmail_Call struct {
	*mock.Call
}

// GetAuthByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockAuthRepository_Expecter) GetAuthByEmail(ctx interface{}, email interface{}) *MockAuthRepository_GetAuthByEmail_Call {
	return &MockAuthRepository_GetAuthByEmail_Call{Call: _e.mock.On("GetAuthByEmail", ctx, email)}
}

func (_c *MockAuthRepository_GetAuthByEmail_Call) Run(run func(ctx context.Context, email string)) *MockAuthRepository_GetAuthByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetAuthByEmail_Call) Return(auth *db.Auth, err error) *MockAuthRepository_GetAuthByEmail_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_GetAuthByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*db.Auth, error)) *MockAuthRepository_GetAuthByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthByID provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetAuthByID(ctx context.Context, id string) (*db.Auth, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthByID")
	}

	var r0 *db.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*db.Auth, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *db.Auth); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetAuthByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthByID'
type MockAuthRepository_GetAuthByID_Call struct {
	*mock.Call
}

// GetAuthByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAuthRepository_Expecter) GetAuthByID(ctx interface{}, id interface{}) *MockAuthRepository_GetAuthByID_Call {
	return &MockAuthRepository_GetAuthByID_Call{Call: _e.mock.On("GetAuthByID", ctx, id)}
}

func (_c *MockAuthRepository_GetAuthByID_Call) Run(run func(ctx context.Context, id string)) *MockAuthRepository_GetAuthByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetAuthByID_Call) Return(auth *db.Auth, err error) *MockAuthRepository_GetAuthByID_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_GetAuthByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*db.Auth, error)) *MockAuthRepository_GetAuthByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthByUsername provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetAuthByUsername(ctx context.Context, username string) (*db.Auth, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthByUsername")
	}

	var r0 *db.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*db.Auth, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *db.Auth); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetAuthByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthByUsername'
type MockAuthRepository_GetAuthByUsername_Call struct {
	*mock.Call
}

// GetAuthByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockAuthRepository_Expecter) GetAuthByUsername(ctx interface{}, username interface{}) *MockAuthRepository_GetAuthByUsername_Call {
	return &MockAuthRepository_GetAuthByUsername_Call{Call: _e.mock.On("GetAuthByUsername", ctx, username)}
}

func (_c *MockAuthRepository_GetAuthByUsername_Call) Run(run func(ctx context.Context, username string)) *MockAuthRepository_GetAuthByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetAuthByUsername_Call) Return(auth *db.Auth, err error) *MockAuthRepository_GetAuthByUsername_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_GetAuthByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*db.Auth, error)) *MockAuthRepository_GetAuthByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthMethodByProviderAndID provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetAuthMethodByProviderAndID(ctx context.Context, provider string, providerID string) (*db.AuthMethod, error) {
	ret := _mock.Called(ctx, provider, providerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthMethodByProviderAndID")
	}

	var r0 *db.AuthMethod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*db.AuthMethod, error)); ok {
		return returnFunc(ctx, provider, providerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *db.AuthMethod); ok {
		r0 = returnFunc(ctx, provider, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.AuthMethod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, provider, providerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetAuthMethodByProviderAndID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthMethodByProviderAndID'
type MockAuthRepository_GetAuthMethodByProviderAndID_Call struct {
	*mock.Call
}

// GetAuthMethodByProviderAndID is a helper method to define mock.On call
//   - ctx context.Context
//   - provider string
//   - providerID string
func (_e *MockAuthRepository_Expecter) GetAuthMethodByProviderAndID(ctx interface{}, provider interface{}, providerID interface{}) *MockAuthRepository_GetAuthMethodByProviderAndID_Call {
	return &MockAuthRepository_GetAuthMethodByProviderAndID_Call{Call: _e.mock.On("GetAuthMethodByProviderAndID", ctx, provider, providerID)}
}

func (_c *MockAuthRepository_GetAuthMethodByProviderAndID_Call) Run(run func(ctx context.Context, provider string, providerID string)) *MockAuthRepository_GetAuthMethodByProviderAndID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetAuthMethodByProviderAndID_Call) Return(authMethod *db.AuthMethod, err error) *MockAuthRepository_GetAuthMethodByProviderAndID_Call {
	_c.Call.Return(authMethod, err)
	return _c
}

func (_c *MockAuthRepository_GetAuthMethodByProviderAndID_Call) RunAndReturn(run func(ctx context.Context, provider string, providerID string) (*db.AuthMethod, error)) *MockAuthRepository_GetAuthMethodByProviderAndID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthMethodsByAuthID provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) GetAuthMethodsByAuthID(ctx context.Context, authID string) ([]*db.AuthMethod, error) {
	ret := _mock.Called(ctx, authID)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthMethodsByAuthID")
	}

	var r0 []*db.AuthMethod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*db.AuthMethod, error)); ok {
		return returnFunc(ctx, authID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*db.AuthMethod); ok {
		r0 = returnFunc(ctx, authID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.AuthMethod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, authID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_GetAuthMethodsByAuthID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthMethodsByAuthID'
type MockAuthRepository_GetAuthMethodsByAuthID_Call struct {
	*mock.Call
}

// GetAuthMethodsByAuthID is a helper method to define mock.On call
//   - ctx context.Context
//   - authID string
func (_e *MockAuthRepository_Expecter) GetAuthMethodsByAuthID(ctx interface{}, authID interface{}) *MockAuthRepository_GetAuthMethodsByAuthID_Call {
	return &MockAuthRepository_GetAuthMethodsByAuthID_Call{Call: _e.mock.On("GetAuthMethodsByAuthID", ctx, authID)}
}

func (_c *MockAuthRepository_GetAuthMethodsByAuthID_Call) Run(run func(ctx context.Context, authID string)) *MockAuthRepository_GetAuthMethodsByAuthID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_GetAuthMethodsByAuthID_Call) Return(authMethods []*db.AuthMethod, err error) *MockAuthRepository_GetAuthMethodsByAuthID_Call {
	_c.Call.Return(authMethods, err)
	return _c
}

func (_c *MockAuthRepository_GetAuthMethodsByAuthID_Call) RunAndReturn(run func(ctx context.Context, authID string) ([]*db.AuthMethod, error)) *MockAuthRepository_GetAuthMethodsByAuthID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllAuths provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) ListAllAuths(ctx context.Context) ([]*db.Auth, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAllAuths")
	}

	var r0 []*db.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*db.Auth, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*db.Auth); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_ListAllAuths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllAuths'
type MockAuthRepository_ListAllAuths_Call struct {
	*mock.Call
}

// ListAllAuths is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthRepository_Expecter) ListAllAuths(ctx interface{}) *MockAuthRepository_ListAllAuths_Call {
	return &MockAuthRepository_ListAllAuths_Call{Call: _e.mock.On("ListAllAuths", ctx)}
}

func (_c *MockAuthRepository_ListAllAuths_Call) Run(run func(ctx context.Context)) *MockAuthRepository_ListAllAuths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthRepository_ListAllAuths_Call) Return(auths []*db.Auth, err error) *MockAuthRepository_ListAllAuths_Call {
	_c.Call.Return(auths, err)
	return _c
}

func (_c *MockAuthRepository_ListAllAuths_Call) RunAndReturn(run func(ctx context.Context) ([]*db.Auth, error)) *MockAuthRepository_ListAllAuths_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteAuth provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) SoftDeleteAuth(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteAuth")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_SoftDeleteAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteAuth'
type MockAuthRepository_SoftDeleteAuth_Call struct {
	*mock.Call
}

// SoftDeleteAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAuthRepository_Expecter) SoftDeleteAuth(ctx interface{}, id interface{}) *MockAuthRepository_SoftDeleteAuth_Call {
	return &MockAuthRepository_SoftDeleteAuth_Call{Call: _e.mock.On("SoftDeleteAuth", ctx, id)}
}

func (_c *MockAuthRepository_SoftDeleteAuth_Call) Run(run func(ctx context.Context, id string)) *MockAuthRepository_SoftDeleteAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_SoftDeleteAuth_Call) Return(err error) *MockAuthRepository_SoftDeleteAuth_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_SoftDeleteAuth_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockAuthRepository_SoftDeleteAuth_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteAuthMethod provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) SoftDeleteAuthMethod(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteAuthMethod")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_SoftDeleteAuthMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteAuthMethod'
type MockAuthRepository_SoftDeleteAuthMethod_Call struct {
	*mock.Call
}

// SoftDeleteAuthMethod is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAuthRepository_Expecter) SoftDeleteAuthMethod(ctx interface{}, id interface{}) *MockAuthRepository_SoftDeleteAuthMethod_Call {
	return &MockAuthRepository_SoftDeleteAuthMethod_Call{Call: _e.mock.On("SoftDeleteAuthMethod", ctx, id)}
}

func (_c *MockAuthRepository_SoftDeleteAuthMethod_Call) Run(run func(ctx context.Context, id string)) *MockAuthRepository_SoftDeleteAuthMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_SoftDeleteAuthMethod_Call) Return(err error) *MockAuthRepository_SoftDeleteAuthMethod_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_SoftDeleteAuthMethod_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockAuthRepository_SoftDeleteAuthMethod_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuth provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) UpdateAuth(ctx context.Context, params db.UpdateAuthParams) (*db.Auth, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuth")
	}

	var r0 *db.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateAuthParams) (*db.Auth, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateAuthParams) *db.Auth); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateAuthParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_UpdateAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuth'
type MockAuthRepository_UpdateAuth_Call struct {
	*mock.Call
}

// UpdateAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - params db.UpdateAuthParams
func (_e *MockAuthRepository_Expecter) UpdateAuth(ctx interface{}, params interface{}) *MockAuthRepository_UpdateAuth_Call {
	return &MockAuthRepository_UpdateAuth_Call{Call: _e.mock.On("UpdateAuth", ctx, params)}
}

func (_c *MockAuthRepository_UpdateAuth_Call) Run(run func(ctx context.Context, params db.UpdateAuthParams)) *MockAuthRepository_UpdateAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateAuthParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateAuthParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_UpdateAuth_Call) Return(auth *db.Auth, err error) *MockAuthRepository_UpdateAuth_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_UpdateAuth_Call) RunAndReturn(run func(ctx context.Context, params db.UpdateAuthParams) (*db.Auth, error)) *MockAuthRepository_UpdateAuth_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthMethod provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) UpdateAuthMethod(ctx context.Context, params db.UpdateAuthMethodParams) (*db.AuthMethod, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthMethod")
	}

	var r0 *db.AuthMethod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateAuthMethodParams) (*db.AuthMethod, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateAuthMethodParams) *db.AuthMethod); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.AuthMethod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateAuthMethodParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_UpdateAuthMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthMethod'
type MockAuthRepository_UpdateAuthMethod_Call struct {
	*mock.Call
}

// UpdateAuthMethod is a helper method to define mock.On call
//   - ctx context.Context
//   - params db.UpdateAuthMethodParams
func (_e *MockAuthRepository_Expecter) UpdateAuthMethod(ctx interface{}, params interface{}) *MockAuthRepository_UpdateAuthMethod_Call {
	return &MockAuthRepository_UpdateAuthMethod_Call{Call: _e.mock.On("UpdateAuthMethod", ctx, params)}
}

func (_c *MockAuthRepository_UpdateAuthMethod_Call) Run(run func(ctx context.Context, params db.UpdateAuthMethodParams)) *MockAuthRepository_UpdateAuthMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateAuthMethodParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateAuthMethodParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepository_UpdateAuthMethod_Call) Return(authMethod *db.AuthMethod, err error) *MockAuthRepository_UpdateAuthMethod_Call {
	_c.Call.Return(authMethod, err)
	return _c
}

func (_c *MockAuthRepository_UpdateAuthMethod_Call) RunAndReturn(run func(ctx context.Context, params db.UpdateAuthMethodParams) (*db.AuthMethod, error)) *MockAuthRepository_UpdateAuthMethod_Call {
	_c.Call.Return(run)
	return _c
}
