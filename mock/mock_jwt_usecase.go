// Code generated by MockGen. DO NOT EDIT.
// Source: jwtUsecase.go
//
// Generated by this command:
//
//	mockgen -source=jwtUsecase.go -destination=../../../mock/mock_jwt_usecase.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	models "template-golang/modules/auth/models"

	goth "github.com/markbates/goth"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTUsecase is a mock of JWTUsecase interface.
type MockJWTUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockJWTUsecaseMockRecorder
	isgomock struct{}
}

// MockJWTUsecaseMockRecorder is the mock recorder for MockJWTUsecase.
type MockJWTUsecaseMockRecorder struct {
	mock *MockJWTUsecase
}

// NewMockJWTUsecase creates a new mock instance.
func NewMockJWTUsecase(ctrl *gomock.Controller) *MockJWTUsecase {
	mock := &MockJWTUsecase{ctrl: ctrl}
	mock.recorder = &MockJWTUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTUsecase) EXPECT() *MockJWTUsecaseMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockJWTUsecase) GenerateJWT(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockJWTUsecaseMockRecorder) GenerateJWT(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockJWTUsecase)(nil).GenerateJWT), userID)
}

// UpsertUser mocks base method.
func (m *MockJWTUsecase) UpsertUser(user goth.User, role ...models.Role) error {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range role {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockJWTUsecaseMockRecorder) UpsertUser(user any, role ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, role...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockJWTUsecase)(nil).UpsertUser), varargs...)
}

// ValidateJWT mocks base method.
func (m *MockJWTUsecase) ValidateJWT(tokenString string) (*models.TokenValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateJWT", tokenString)
	ret0, _ := ret[0].(*models.TokenValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateJWT indicates an expected call of ValidateJWT.
func (mr *MockJWTUsecaseMockRecorder) ValidateJWT(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateJWT", reflect.TypeOf((*MockJWTUsecase)(nil).ValidateJWT), tokenString)
}
