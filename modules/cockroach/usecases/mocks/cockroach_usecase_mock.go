// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"template-golang/modules/cockroach/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCockroachUsecase creates a new instance of MockCockroachUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCockroachUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCockroachUsecase {
	mock := &MockCockroachUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCockroachUsecase is an autogenerated mock type for the CockroachUsecase type
type MockCockroachUsecase struct {
	mock.Mock
}

type MockCockroachUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCockroachUsecase) EXPECT() *MockCockroachUsecase_Expecter {
	return &MockCockroachUsecase_Expecter{mock: &_m.Mock}
}

// ProcessData provides a mock function for the type MockCockroachUsecase
func (_mock *MockCockroachUsecase) ProcessData(data *models.AddCockroachData) error {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for ProcessData")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.AddCockroachData) error); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCockroachUsecase_ProcessData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessData'
type MockCockroachUsecase_ProcessData_Call struct {
	*mock.Call
}

// ProcessData is a helper method to define mock.On call
//   - data *models.AddCockroachData
func (_e *MockCockroachUsecase_Expecter) ProcessData(data interface{}) *MockCockroachUsecase_ProcessData_Call {
	return &MockCockroachUsecase_ProcessData_Call{Call: _e.mock.On("ProcessData", data)}
}

func (_c *MockCockroachUsecase_ProcessData_Call) Run(run func(data *models.AddCockroachData)) *MockCockroachUsecase_ProcessData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.AddCockroachData
		if args[0] != nil {
			arg0 = args[0].(*models.AddCockroachData)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCockroachUsecase_ProcessData_Call) Return(err error) *MockCockroachUsecase_ProcessData_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCockroachUsecase_ProcessData_Call) RunAndReturn(run func(data *models.AddCockroachData) error) *MockCockroachUsecase_ProcessData_Call {
	_c.Call.Return(run)
	return _c
}
