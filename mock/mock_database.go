// Code generated by MockGen. DO NOT EDIT.
// Source: database.go
//
// Generated by this command:
//
//	mockgen -source=database.go -destination=../mock/mock_database.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// GetDb mocks base method.
func (m *MockDatabase) GetDb() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDb")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDb indicates an expected call of GetDb.
func (mr *MockDatabaseMockRecorder) GetDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDb", reflect.TypeOf((*MockDatabase)(nil).GetDb))
}

// GetVersion mocks base method.
func (m *MockDatabase) GetVersion() (uint, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockDatabaseMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockDatabase)(nil).GetVersion))
}

// MigrateDown mocks base method.
func (m *MockDatabase) MigrateDown(steps int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateDown", steps)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateDown indicates an expected call of MigrateDown.
func (mr *MockDatabaseMockRecorder) MigrateDown(steps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDown", reflect.TypeOf((*MockDatabase)(nil).MigrateDown), steps)
}

// MigrateUp mocks base method.
func (m *MockDatabase) MigrateUp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateUp indicates an expected call of MigrateUp.
func (mr *MockDatabaseMockRecorder) MigrateUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateUp", reflect.TypeOf((*MockDatabase)(nil).MigrateUp))
}
