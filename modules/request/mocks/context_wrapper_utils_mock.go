// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockcontextWrapperUtils creates a new instance of MockcontextWrapperUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcontextWrapperUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockcontextWrapperUtils {
	mock := &MockcontextWrapperUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockcontextWrapperUtils is an autogenerated mock type for the contextWrapperUtils type
type MockcontextWrapperUtils struct {
	mock.Mock
}

type MockcontextWrapperUtils_Expecter struct {
	mock *mock.Mock
}

func (_m *MockcontextWrapperUtils) EXPECT() *MockcontextWrapperUtils_Expecter {
	return &MockcontextWrapperUtils_Expecter{mock: &_m.Mock}
}

// Bind provides a mock function for the type MockcontextWrapperUtils
func (_mock *MockcontextWrapperUtils) Bind(data any) error {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockcontextWrapperUtils_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockcontextWrapperUtils_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - data any
func (_e *MockcontextWrapperUtils_Expecter) Bind(data interface{}) *MockcontextWrapperUtils_Bind_Call {
	return &MockcontextWrapperUtils_Bind_Call{Call: _e.mock.On("Bind", data)}
}

func (_c *MockcontextWrapperUtils_Bind_Call) Run(run func(data any)) *MockcontextWrapperUtils_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockcontextWrapperUtils_Bind_Call) Return(err error) *MockcontextWrapperUtils_Bind_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockcontextWrapperUtils_Bind_Call) RunAndReturn(run func(data any) error) *MockcontextWrapperUtils_Bind_Call {
	_c.Call.Return(run)
	return _c
}
