// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"template-golang/modules/cockroach/entities"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCockroachMessaging creates a new instance of MockCockroachMessaging. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCockroachMessaging(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCockroachMessaging {
	mock := &MockCockroachMessaging{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCockroachMessaging is an autogenerated mock type for the CockroachMessaging type
type MockCockroachMessaging struct {
	mock.Mock
}

type MockCockroachMessaging_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCockroachMessaging) EXPECT() *MockCockroachMessaging_Expecter {
	return &MockCockroachMessaging_Expecter{mock: &_m.Mock}
}

// PushNotification provides a mock function for the type MockCockroachMessaging
func (_mock *MockCockroachMessaging) PushNotification(m *entities.CockroachPushNotificationDto) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for PushNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entities.CockroachPushNotificationDto) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCockroachMessaging_PushNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushNotification'
type MockCockroachMessaging_PushNotification_Call struct {
	*mock.Call
}

// PushNotification is a helper method to define mock.On call
//   - m *entities.CockroachPushNotificationDto
func (_e *MockCockroachMessaging_Expecter) PushNotification(m interface{}) *MockCockroachMessaging_PushNotification_Call {
	return &MockCockroachMessaging_PushNotification_Call{Call: _e.mock.On("PushNotification", m)}
}

func (_c *MockCockroachMessaging_PushNotification_Call) Run(run func(m *entities.CockroachPushNotificationDto)) *MockCockroachMessaging_PushNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *entities.CockroachPushNotificationDto
		if args[0] != nil {
			arg0 = args[0].(*entities.CockroachPushNotificationDto)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCockroachMessaging_PushNotification_Call) Return(err error) *MockCockroachMessaging_PushNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCockroachMessaging_PushNotification_Call) RunAndReturn(run func(m *entities.CockroachPushNotificationDto) error) *MockCockroachMessaging_PushNotification_Call {
	_c.Call.Return(run)
	return _c
}
