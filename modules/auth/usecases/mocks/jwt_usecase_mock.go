// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"template-golang/modules/auth/models"

	"github.com/markbates/goth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJWTUsecase creates a new instance of MockJWTUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTUsecase {
	mock := &MockJWTUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJWTUsecase is an autogenerated mock type for the JWTUsecase type
type MockJWTUsecase struct {
	mock.Mock
}

type MockJWTUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTUsecase) EXPECT() *MockJWTUsecase_Expecter {
	return &MockJWTUsecase_Expecter{mock: &_m.Mock}
}

// GenerateJWT provides a mock function for the type MockJWTUsecase
func (_mock *MockJWTUsecase) GenerateJWT(userID string) (string, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTUsecase_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type MockJWTUsecase_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - userID string
func (_e *MockJWTUsecase_Expecter) GenerateJWT(userID interface{}) *MockJWTUsecase_GenerateJWT_Call {
	return &MockJWTUsecase_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", userID)}
}

func (_c *MockJWTUsecase_GenerateJWT_Call) Run(run func(userID string)) *MockJWTUsecase_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJWTUsecase_GenerateJWT_Call) Return(s string, err error) *MockJWTUsecase_GenerateJWT_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJWTUsecase_GenerateJWT_Call) RunAndReturn(run func(userID string) (string, error)) *MockJWTUsecase_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertUser provides a mock function for the type MockJWTUsecase
func (_mock *MockJWTUsecase) UpsertUser(user goth.User, role ...models.Role) error {
	var tmpRet mock.Arguments
	if len(role) > 0 {
		tmpRet = _mock.Called(user, role)
	} else {
		tmpRet = _mock.Called(user)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(goth.User, ...models.Role) error); ok {
		r0 = returnFunc(user, role...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJWTUsecase_UpsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertUser'
type MockJWTUsecase_UpsertUser_Call struct {
	*mock.Call
}

// UpsertUser is a helper method to define mock.On call
//   - user goth.User
//   - role ...models.Role
func (_e *MockJWTUsecase_Expecter) UpsertUser(user interface{}, role ...interface{}) *MockJWTUsecase_UpsertUser_Call {
	return &MockJWTUsecase_UpsertUser_Call{Call: _e.mock.On("UpsertUser",
		append([]interface{}{user}, role...)...)}
}

func (_c *MockJWTUsecase_UpsertUser_Call) Run(run func(user goth.User, role ...models.Role)) *MockJWTUsecase_UpsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 goth.User
		if args[0] != nil {
			arg0 = args[0].(goth.User)
		}
		var arg1 []models.Role
		var variadicArgs []models.Role
		if len(args) > 1 {
			variadicArgs = args[1].([]models.Role)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockJWTUsecase_UpsertUser_Call) Return(err error) *MockJWTUsecase_UpsertUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJWTUsecase_UpsertUser_Call) RunAndReturn(run func(user goth.User, role ...models.Role) error) *MockJWTUsecase_UpsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateJWT provides a mock function for the type MockJWTUsecase
func (_mock *MockJWTUsecase) ValidateJWT(tokenString string) (*models.TokenValidationResult, error) {
	ret := _mock.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJWT")
	}

	var r0 *models.TokenValidationResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.TokenValidationResult, error)); ok {
		return returnFunc(tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.TokenValidationResult); ok {
		r0 = returnFunc(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenValidationResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTUsecase_ValidateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJWT'
type MockJWTUsecase_ValidateJWT_Call struct {
	*mock.Call
}

// ValidateJWT is a helper method to define mock.On call
//   - tokenString string
func (_e *MockJWTUsecase_Expecter) ValidateJWT(tokenString interface{}) *MockJWTUsecase_ValidateJWT_Call {
	return &MockJWTUsecase_ValidateJWT_Call{Call: _e.mock.On("ValidateJWT", tokenString)}
}

func (_c *MockJWTUsecase_ValidateJWT_Call) Run(run func(tokenString string)) *MockJWTUsecase_ValidateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJWTUsecase_ValidateJWT_Call) Return(tokenValidationResult *models.TokenValidationResult, err error) *MockJWTUsecase_ValidateJWT_Call {
	_c.Call.Return(tokenValidationResult, err)
	return _c
}

func (_c *MockJWTUsecase_ValidateJWT_Call) RunAndReturn(run func(tokenString string) (*models.TokenValidationResult, error)) *MockJWTUsecase_ValidateJWT_Call {
	_c.Call.Return(run)
	return _c
}
