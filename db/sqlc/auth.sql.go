// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auths (username, password, email, role, active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, deleted_at, username, password, email, role, active
`

func (q *Queries) CreateAuth(ctx context.Context, username *string, password *string, email *string, role string, active bool) (Auth, error) {
	row := q.db.QueryRow(ctx, createAuth,
		username,
		password,
		email,
		role,
		active,
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const createAuthMethod = `-- name: CreateAuthMethod :one
INSERT INTO auth_methods (
    auth_id, provider, provider_id, email, user_id, name, first_name, last_name,
    nick_name, description, avatar_url, location, access_token, refresh_token,
    id_token, expires_at, access_token_secret
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
RETURNING id, created_at, updated_at, deleted_at, auth_id, provider, provider_id, email, user_id, name, first_name, last_name, nick_name, description, avatar_url, location, access_token, refresh_token, id_token, expires_at, access_token_secret
`

type CreateAuthMethodParams struct {
	AuthID            *string            `json:"auth_id"`
	Provider          string             `json:"provider"`
	ProviderID        string             `json:"provider_id"`
	Email             *string            `json:"email"`
	UserID            *string            `json:"user_id"`
	Name              *string            `json:"name"`
	FirstName         *string            `json:"first_name"`
	LastName          *string            `json:"last_name"`
	NickName          *string            `json:"nick_name"`
	Description       *string            `json:"description"`
	AvatarUrl         *string            `json:"avatar_url"`
	Location          *string            `json:"location"`
	AccessToken       *string            `json:"access_token"`
	RefreshToken      *string            `json:"refresh_token"`
	IDToken           *string            `json:"id_token"`
	ExpiresAt         pgtype.Timestamptz `json:"expires_at"`
	AccessTokenSecret *string            `json:"access_token_secret"`
}

// Auth Methods queries
func (q *Queries) CreateAuthMethod(ctx context.Context, arg CreateAuthMethodParams) (AuthMethod, error) {
	row := q.db.QueryRow(ctx, createAuthMethod,
		arg.AuthID,
		arg.Provider,
		arg.ProviderID,
		arg.Email,
		arg.UserID,
		arg.Name,
		arg.FirstName,
		arg.LastName,
		arg.NickName,
		arg.Description,
		arg.AvatarUrl,
		arg.Location,
		arg.AccessToken,
		arg.RefreshToken,
		arg.IDToken,
		arg.ExpiresAt,
		arg.AccessTokenSecret,
	)
	var i AuthMethod
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AuthID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.UserID,
		&i.Name,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.Description,
		&i.AvatarUrl,
		&i.Location,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.ExpiresAt,
		&i.AccessTokenSecret,
	)
	return i, err
}

const getAuthByEmail = `-- name: GetAuthByEmail :one
SELECT id, created_at, updated_at, deleted_at, username, password, email, role, active FROM auths
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAuthByEmail(ctx context.Context, email *string) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const getAuthByID = `-- name: GetAuthByID :one
SELECT id, created_at, updated_at, deleted_at, username, password, email, role, active FROM auths
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAuthByID(ctx context.Context, id string) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByID, id)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const getAuthByUsername = `-- name: GetAuthByUsername :one
SELECT id, created_at, updated_at, deleted_at, username, password, email, role, active FROM auths
WHERE username = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAuthByUsername(ctx context.Context, username *string) (Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByUsername, username)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const getAuthMethodByProviderAndID = `-- name: GetAuthMethodByProviderAndID :one
SELECT id, created_at, updated_at, deleted_at, auth_id, provider, provider_id, email, user_id, name, first_name, last_name, nick_name, description, avatar_url, location, access_token, refresh_token, id_token, expires_at, access_token_secret FROM auth_methods
WHERE provider = $1 AND provider_id = $2 AND deleted_at IS NULL
`

func (q *Queries) GetAuthMethodByProviderAndID(ctx context.Context, provider string, providerID string) (AuthMethod, error) {
	row := q.db.QueryRow(ctx, getAuthMethodByProviderAndID, provider, providerID)
	var i AuthMethod
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AuthID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.UserID,
		&i.Name,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.Description,
		&i.AvatarUrl,
		&i.Location,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.ExpiresAt,
		&i.AccessTokenSecret,
	)
	return i, err
}

const getAuthMethodsByAuthID = `-- name: GetAuthMethodsByAuthID :many
SELECT id, created_at, updated_at, deleted_at, auth_id, provider, provider_id, email, user_id, name, first_name, last_name, nick_name, description, avatar_url, location, access_token, refresh_token, id_token, expires_at, access_token_secret FROM auth_methods
WHERE auth_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAuthMethodsByAuthID(ctx context.Context, authID *string) ([]AuthMethod, error) {
	rows, err := q.db.Query(ctx, getAuthMethodsByAuthID, authID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthMethod
	for rows.Next() {
		var i AuthMethod
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.AuthID,
			&i.Provider,
			&i.ProviderID,
			&i.Email,
			&i.UserID,
			&i.Name,
			&i.FirstName,
			&i.LastName,
			&i.NickName,
			&i.Description,
			&i.AvatarUrl,
			&i.Location,
			&i.AccessToken,
			&i.RefreshToken,
			&i.IDToken,
			&i.ExpiresAt,
			&i.AccessTokenSecret,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllAuths = `-- name: ListAllAuths :many
SELECT id, created_at, updated_at, deleted_at, username, password, email, role, active FROM auths
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListAllAuths(ctx context.Context) ([]Auth, error) {
	rows, err := q.db.Query(ctx, listAllAuths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Auth
	for rows.Next() {
		var i Auth
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Role,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteAuth = `-- name: SoftDeleteAuth :exec
UPDATE auths
SET deleted_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteAuth(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, softDeleteAuth, id)
	return err
}

const softDeleteAuthMethod = `-- name: SoftDeleteAuthMethod :exec
UPDATE auth_methods
SET deleted_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteAuthMethod(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, softDeleteAuthMethod, id)
	return err
}

const updateAuth = `-- name: UpdateAuth :one
UPDATE auths
SET username = $2, password = $3, email = $4, role = $5, active = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, username, password, email, role, active
`

type UpdateAuthParams struct {
	ID       string  `json:"id"`
	Username *string `json:"username"`
	Password *string `json:"password"`
	Email    *string `json:"email"`
	Role     string  `json:"role"`
	Active   bool    `json:"active"`
}

func (q *Queries) UpdateAuth(ctx context.Context, arg UpdateAuthParams) (Auth, error) {
	row := q.db.QueryRow(ctx, updateAuth,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Role,
		arg.Active,
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Role,
		&i.Active,
	)
	return i, err
}

const updateAuthMethod = `-- name: UpdateAuthMethod :one
UPDATE auth_methods
SET access_token = $3, refresh_token = $4, id_token = $5, expires_at = $6, updated_at = CURRENT_TIMESTAMP
WHERE auth_id = $1 AND provider = $2 AND deleted_at IS NULL
RETURNING id, created_at, updated_at, deleted_at, auth_id, provider, provider_id, email, user_id, name, first_name, last_name, nick_name, description, avatar_url, location, access_token, refresh_token, id_token, expires_at, access_token_secret
`

type UpdateAuthMethodParams struct {
	AuthID       *string            `json:"auth_id"`
	Provider     string             `json:"provider"`
	AccessToken  *string            `json:"access_token"`
	RefreshToken *string            `json:"refresh_token"`
	IDToken      *string            `json:"id_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) UpdateAuthMethod(ctx context.Context, arg UpdateAuthMethodParams) (AuthMethod, error) {
	row := q.db.QueryRow(ctx, updateAuthMethod,
		arg.AuthID,
		arg.Provider,
		arg.AccessToken,
		arg.RefreshToken,
		arg.IDToken,
		arg.ExpiresAt,
	)
	var i AuthMethod
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AuthID,
		&i.Provider,
		&i.ProviderID,
		&i.Email,
		&i.UserID,
		&i.Name,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.Description,
		&i.AvatarUrl,
		&i.Location,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.ExpiresAt,
		&i.AccessTokenSecret,
	)
	return i, err
}
