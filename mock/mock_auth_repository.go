// Code generated by MockGen. DO NOT EDIT.
// Source: authRepository.go
//
// Generated by this command:
//
//	mockgen -source=authRepository.go -destination=../../../mock/mock_auth_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entities "template-golang/modules/auth/entities"
	repositories "template-golang/modules/auth/repositories"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// GetAuthIDMethodIDByUserID mocks base method.
func (m *MockAuthRepository) GetAuthIDMethodIDByUserID(userID string) (*repositories.GetAuthIdMethodIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthIDMethodIDByUserID", userID)
	ret0, _ := ret[0].(*repositories.GetAuthIdMethodIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthIDMethodIDByUserID indicates an expected call of GetAuthIDMethodIDByUserID.
func (mr *MockAuthRepositoryMockRecorder) GetAuthIDMethodIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthIDMethodIDByUserID", reflect.TypeOf((*MockAuthRepository)(nil).GetAuthIDMethodIDByUserID), userID)
}

// GetUserByUserID mocks base method.
func (m *MockAuthRepository) GetUserByUserID(userID string) (*entities.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", userID)
	ret0, _ := ret[0].(*entities.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockAuthRepositoryMockRecorder) GetUserByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByUserID), userID)
}

// Gets mocks base method.
func (m *MockAuthRepository) Gets(limit int) ([]*entities.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", limit)
	ret0, _ := ret[0].([]*entities.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockAuthRepositoryMockRecorder) Gets(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockAuthRepository)(nil).Gets), limit)
}

// UpsertData mocks base method.
func (m *MockAuthRepository) UpsertData(in *entities.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertData", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertData indicates an expected call of UpsertData.
func (mr *MockAuthRepositoryMockRecorder) UpsertData(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertData", reflect.TypeOf((*MockAuthRepository)(nil).UpsertData), in)
}
