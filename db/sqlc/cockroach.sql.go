// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cockroach.sql

package db

import (
	"context"
)

const createCockroach = `-- name: CreateCockroach :one
INSERT INTO cockroaches (amount)
VALUES ($1)
RETURNING id, amount, created_at
`

func (q *Queries) CreateCockroach(ctx context.Context, amount int32) (Cockroach, error) {
	row := q.db.QueryRow(ctx, createCockroach, amount)
	var i Cockroach
	err := row.Scan(&i.ID, &i.Amount, &i.CreatedAt)
	return i, err
}

const deleteCockroach = `-- name: DeleteCockroach :exec
DELETE FROM cockroaches
WHERE id = $1
`

func (q *Queries) DeleteCockroach(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCockroach, id)
	return err
}

const getCockroachByID = `-- name: GetCockroachByID :one
SELECT id, amount, created_at FROM cockroaches
WHERE id = $1
`

func (q *Queries) GetCockroachByID(ctx context.Context, id int32) (Cockroach, error) {
	row := q.db.QueryRow(ctx, getCockroachByID, id)
	var i Cockroach
	err := row.Scan(&i.ID, &i.Amount, &i.CreatedAt)
	return i, err
}

const listCockroaches = `-- name: ListCockroaches :many
SELECT id, amount, created_at FROM cockroaches
ORDER BY created_at DESC
`

func (q *Queries) ListCockroaches(ctx context.Context) ([]Cockroach, error) {
	rows, err := q.db.Query(ctx, listCockroaches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cockroach
	for rows.Next() {
		var i Cockroach
		if err := rows.Scan(&i.ID, &i.Amount, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCockroach = `-- name: UpdateCockroach :one
UPDATE cockroaches
SET amount = $2
WHERE id = $1
RETURNING id, amount, created_at
`

func (q *Queries) UpdateCockroach(ctx context.Context, iD int32, amount int32) (Cockroach, error) {
	row := q.db.QueryRow(ctx, updateCockroach, iD, amount)
	var i Cockroach
	err := row.Scan(&i.ID, &i.Amount, &i.CreatedAt)
	return i, err
}
