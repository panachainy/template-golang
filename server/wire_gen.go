// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/google/wire"
	"template-golang/config"
	"template-golang/database"
	"template-golang/modules/cockroach"
	"template-golang/modules/cockroach/handlers"
	"template-golang/modules/cockroach/repositories"
	"template-golang/modules/cockroach/usecases"
)

// Injectors from wire.go:

func Wire() (Server, error) {
	configConfig := config.GetConfig()
	postgresDatabase := database.NewPostgresDatabase(configConfig)
	cockroachPostgresRepository := repositories.NewCockroachPostgresRepository(postgresDatabase)
	cockroachFCMMessaging := repositories.NewCockroachFCMMessaging()
	cockroachUsecaseImpl := usecases.NewCockroachUsecaseImpl(cockroachPostgresRepository, cockroachFCMMessaging)
	cockroachHttpHandler := handlers.NewCockroachHttpHandler(cockroachUsecaseImpl)
	cockroachCockroach := &cockroach.Cockroach{
		Handler:    cockroachHttpHandler,
		Repository: cockroachPostgresRepository,
		Messaging:  cockroachFCMMessaging,
		Usecase:    cockroachUsecaseImpl,
	}
	serverGinServer := NewGinServer(configConfig, cockroachCockroach)
	return serverGinServer, nil
}

// wire.go:

var ProviderSet = wire.NewSet(
	NewGinServer, wire.Bind(new(Server), new(*ginServer)), config.ProviderSet, database.ProviderSet, cockroach.ProviderSet,
)
